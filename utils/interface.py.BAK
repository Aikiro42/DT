from abc import ABC
import pyglet
from pyglet.gl import *


class Coordinates:
    def __init__(self, x, y):
        self.x = x
        self.y = y

    def get_coor(self):
        return self.x, self.y

    def set_coor(self):
        return self.x, self.y

    def pyglet_coor(self, window_obj):
        self.y = window_obj.height - self.y


class Image:
    def __init__(self, image_path, *args, **kwargs):
        self.image = pyglet.resource.image(image_path)
        self.coor = Coordinates(0, 0)

    def set_coor(self, x, y):
        self.coor.x = x
        self.coor.y = y


class Button:
    def __init__(self, image_path="", *args, **kwargs):
        self.image = pyglet.resource.image(image_path)
        self.coor = Coordinates(0, 0)

    def get_image(self):
        return self.image

    def set_coor(self, x, y):
        self.coor.x = x
        self.coor.y = y


class Window(pyglet.window.Window):
    def __init__(self, *args, width=800, height=600, resizable=False, **kwargs):

        # initialize window
        config = Config(sample_buffers=1, samples=4, depth_size=16, double_buffer=True, mouse_visible=False)
        super(Window, self).__init__(width=width, height=height, resizable=resizable, config=config)
        self.batch = pyglet.graphics.Batch()
        glClearColor(0, 0, 0, 0)
        glEnable(GL_BLEND)  # enables transparency
        glBlendFunc(GL_SRC_ALPHA, GL_ONE_MINUS_SRC_ALPHA)  # enables transparency

        # initialize resources
        pyglet.resource.path = ['../assets']
        pyglet.resource.reindex()

        # initialize window objects
        self.buttons = []
        self.images = []

    def add_button(self, button_obj):
        self.buttons.append()

    def on_draw(self):
        self.clear()
        self.batch.draw()

    def on_mouse_press(self, x, y, button, modifiers):
        for button in self.buttons:
            if button.clicked(x, y):
                button.run_event()

